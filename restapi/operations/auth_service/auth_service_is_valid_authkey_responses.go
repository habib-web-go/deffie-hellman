// Code generated by go-swagger; DO NOT EDIT.

package auth_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/my/repo/models"
)

// AuthServiceIsValidAuthkeyOKCode is the HTTP code returned for type AuthServiceIsValidAuthkeyOK
const AuthServiceIsValidAuthkeyOKCode int = 200

/*
AuthServiceIsValidAuthkeyOK A successful response.

swagger:response authServiceIsValidAuthkeyOK
*/
type AuthServiceIsValidAuthkeyOK struct {

	/*
	  In: Body
	*/
	Payload *models.AuthDHIsValidAuthKeyResponse `json:"body,omitempty"`
}

// NewAuthServiceIsValidAuthkeyOK creates AuthServiceIsValidAuthkeyOK with default headers values
func NewAuthServiceIsValidAuthkeyOK() *AuthServiceIsValidAuthkeyOK {

	return &AuthServiceIsValidAuthkeyOK{}
}

// WithPayload adds the payload to the auth service is valid authkey o k response
func (o *AuthServiceIsValidAuthkeyOK) WithPayload(payload *models.AuthDHIsValidAuthKeyResponse) *AuthServiceIsValidAuthkeyOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the auth service is valid authkey o k response
func (o *AuthServiceIsValidAuthkeyOK) SetPayload(payload *models.AuthDHIsValidAuthKeyResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AuthServiceIsValidAuthkeyOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
AuthServiceIsValidAuthkeyDefault An unexpected error response.

swagger:response authServiceIsValidAuthkeyDefault
*/
type AuthServiceIsValidAuthkeyDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.RuntimeError `json:"body,omitempty"`
}

// NewAuthServiceIsValidAuthkeyDefault creates AuthServiceIsValidAuthkeyDefault with default headers values
func NewAuthServiceIsValidAuthkeyDefault(code int) *AuthServiceIsValidAuthkeyDefault {
	if code <= 0 {
		code = 500
	}

	return &AuthServiceIsValidAuthkeyDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the auth service is valid authkey default response
func (o *AuthServiceIsValidAuthkeyDefault) WithStatusCode(code int) *AuthServiceIsValidAuthkeyDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the auth service is valid authkey default response
func (o *AuthServiceIsValidAuthkeyDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the auth service is valid authkey default response
func (o *AuthServiceIsValidAuthkeyDefault) WithPayload(payload *models.RuntimeError) *AuthServiceIsValidAuthkeyDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the auth service is valid authkey default response
func (o *AuthServiceIsValidAuthkeyDefault) SetPayload(payload *models.RuntimeError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AuthServiceIsValidAuthkeyDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
